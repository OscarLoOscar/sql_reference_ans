use exer1;

use ORG;

CREATE TABLE REGIONS (
  REGION_ID INT  AUTO_INCREMENT,
  REGION_NAME VARCHAR(25),
  CONSTRAINT PK_REGIONS PRIMARY KEY (REGION_ID)
);

CREATE TABLE COUNTRIES(
  COUNTRY_ID INT  AUTO_INCREMENT,
  COUNTRY_NAME VARCHAR(40),
  REGION_ID INT NOT NULL,
  CONSTRAINT PK_COUNTRIES PRIMARY KEY (COUNTRY_ID),
  CONSTRAINT FK_COUNTRIES FOREIGN KEY(REGION_ID) REFERENCES REGIONS(REGION_ID)
);

CREATE TABLE LOCATIONS(
  LOCATION_ID INT  AUTO_INCREMENT,
  STREET_ADDRESS VARCHAR(25),
  POSTAL_CODE VARCHAR(12),
  CITY VARCHAR(30),
  STATE_PROVINCE VARCHAR(12),
  COUNTRY_ID INT NOT NULL,
  CONSTRAINT PK_LOCATIONS PRIMARY KEY (LOCATION_ID),
  CONSTRAINT PK_LOCATIONS FOREIGN KEY(COUNTRY_ID) REFERENCES COUNTRIES(COUNTRY_ID)
);

CREATE TABLE DEPARTMENTS(
  DEPARTMENT_ID INT  AUTO_INCREMENT,
  DEPARTMENT_NAME VARCHAR(30),
  MANAGER_ID INT NOT NULL,
  LOCATION_ID INT NOT NULL,
  CONSTRAINT PK_DEPARTMENTS PRIMARY KEY (DEPARTMENT_ID),
  CONSTRAINT FK_DEPARTMENTS FOREIGN KEY(LOCATION_ID) REFERENCES LOCATIONS(LOCATION_ID)
);


CREATE TABLE JOBS(
  JOB_ID VARCHAR(10),
  JOB_TITLE VARCHAR(35),
  MIN_SALARY NUMERIC (10,2),
  MAX_SALARY NUMERIC (10,2),
  CONSTRAINT PK_JOBS PRIMARY KEY (JOB_ID)
);
CREATE TABLE EMPLOYEES(
EMPLOYEE_ID INT AUTO_INCREMENT,
FIRST_NAME VARCHAR(20),
LAST_NAME VARCHAR(25),
EMAIL VARCHAR(25),
PHONE_NUMBER VARCHAR(20),
HIRE_DATE DATE,
JOB_ID VARCHAR(10),
SALARY NUMERIC(7,2),
COMMISSION_PCT NUMERIC(10,2),
MANAGER_ID INT NOT NULL,
DEPARTMENT_ID INT NOT NULL,
CONSTRAINT PK_EMPLOYEES PRIMARY KEY (EMPLOYEE_ID),
CONSTRAINT FK_EMPLOYEES1 FOREIGN KEY(DEPARTMENT_ID) REFERENCES DEPARTMENTS(DEPARTMENT_ID),
CONSTRAINT FK_EMPLOYEES2 FOREIGN KEY(JOB_ID) REFERENCES JOBS(JOB_ID)
);

CREATE TABLE JOB_HISTORY(
START_DATE DATE ,
END_DATE DATE,
JOB_ID VARCHAR(10),
DEPARTMENT_ID INT NOT NULL,
EMPLOYEE_ID INT NOT NULL ,
CONSTRAINT PK_JOB_HISTORY PRIMARY KEY (START_DATE,EMPLOYEE_ID),
CONSTRAINT FK_JOB_HISTORY1 FOREIGN KEY(DEPARTMENT_ID) REFERENCES DEPARTMENTS(DEPARTMENT_ID),
CONSTRAINT FK_JOB_HISTORY2 FOREIGN KEY(JOB_ID) REFERENCES JOBS(JOB_ID),
CONSTRAINT FK_JOB_HISTORY3 FOREIGN KEY(EMPLOYEE_ID) REFERENCES EMPLOYEES(EMPLOYEE_ID)
);


-- REGIONS
INSERT INTO REGIONS (REGION_ID, REGION_NAME) VALUES
(1, 'North America'),
(2, 'Europe'),
(3, 'Asia');

-- COUNTRIES
INSERT INTO COUNTRIES (COUNTRY_ID, COUNTRY_NAME, REGION_ID) VALUES
(1, 'United States', 1),
(2, 'United Kingdom', 2),
(3, 'Japan', 3);

-- LOCATIONS
INSERT INTO LOCATIONS (LOCATION_ID, STREET_ADDRESS, POSTAL_CODE, CITY, STATE_PROVINCE, COUNTRY_ID) VALUES
(1001, '123 Main St', '12345', 'New York', 'NY', 1),
(1002, '456 Elm St', '67890', 'London', NULL, 2),
(1003, '789 Oak St', '98765', 'Tokyo', NULL, 3);

-- DEPARTMENTS
INSERT INTO DEPARTMENTS (DEPARTMENT_ID, DEPARTMENT_NAME, MANAGER_ID, LOCATION_ID) VALUES
(10, 'Sales', 101, 1001),
(20, 'HR', 102, 1002),
(30, 'IT', 103, 1003);

-- JOBS
INSERT INTO JOBS (JOB_ID, JOB_TITLE, MIN_SALARY, MAX_SALARY) VALUES
('SALESMAN', 'Salesman', 30000, 60000),
('HR_REP', 'HR Representative', 35000, 70000),
('IT_PROG', 'IT Programmer', 40000, 80000);

-- EMPLOYEES
INSERT INTO EMPLOYEES (EMPLOYEE_ID, FIRST_NAME, LAST_NAME, EMAIL, PHONE_NUMBER, HIRE_DATE, JOB_ID, SALARY, COMMISSION_PCT, MANAGER_ID, DEPARTMENT_ID) VALUES
(101, 'John', 'Doe', 'john@example.com', '123-456-7890', '2023-01-15', 'SALESMAN', 50000, 0.05, 103, 10),
(102, 'Jane', 'Smith', 'jane@example.com', '987-654-3210', '2023-02-20', 'HR_REP', 55000, 0.07, 103, 20),
(103, 'Michael', 'Johnson', 'michael@example.com', '555-123-4567', '2023-03-25', 'IT_PROG', 60000, 0.06, 103,30);

-- JOB_HISTORY
INSERT INTO JOB_HISTORY (START_DATE, END_DATE, JOB_ID, DEPARTMENT_ID, EMPLOYEE_ID) VALUES
('2023-01-15', '2023-05-15', 'SALESMAN', 10, 101),
('2023-02-20', '2023-06-20', 'HR_REP', 20, 102),
('2023-03-25', NULL, 'IT_PROG', 30, 103);

SELECT * FROM REGIONS;
SELECT * FROM COUNTRIES;
SELECT * FROM LOCATIONS;
SELECT * FROM EMPLOYEES;
SELECT * FROM JOBS;
SELECT * FROM DEPARTMENTS;
SELECT * FROM JOB_GRADES;
SELECT * FROM JOB_HISTORY;

-- 3 DONE
SELECT L.location_id, L.street_address, L.city, L.state_province , C.COUNTRY_NAME
FROM LOCATIONS L , COUNTRIES C
WHERE L.COUNTRY_ID = C.COUNTRY_ID;

-- 4 DONE
SELECT first_name, last_name, department_id FROM EMPLOYEES;

-- 5 
-- Approach1
SELECT first_name, last_name, job_id, DEPARTMENT_ID
FROM EMPLOYEES
WHERE EXISTS (
    SELECT *
    FROM DEPARTMENTS D
    WHERE EMPLOYEES.DEPARTMENT_ID = D.DEPARTMENT_ID
    AND D.LOCATION_ID = (
        SELECT LOCATION_ID
        FROM LOCATIONS
        WHERE COUNTRY_ID = (
            SELECT COUNTRY_ID
            FROM COUNTRIES
            WHERE COUNTRY_NAME = 'Japan' 
        )
    )
);
-- Approach2
SELECT E.FIRST_NAME, E.LAST_NAME, E.JOB_ID, E.DEPARTMENT_ID
FROM EMPLOYEES E
JOIN DEPARTMENTS D ON E.DEPARTMENT_ID = D.DEPARTMENT_ID
JOIN LOCATIONS L ON D.LOCATION_ID = L.LOCATION_ID
JOIN COUNTRIES C ON L.COUNTRY_ID = C.COUNTRY_ID
WHERE C.COUNTRY_NAME = 'Japan';


SELECT E.FIRST_NAME, E.LAST_NAME, E.JOB_ID, E.DEPARTMENT_ID
FROM EMPLOYEES E, DEPARTMENTS D 
, LOCATIONS L 
, COUNTRIES C 
WHERE  E.DEPARTMENT_ID = D.DEPARTMENT_ID AND D.LOCATION_ID = L.LOCATION_ID AND  L.COUNTRY_ID = C.COUNTRY_ID AND C.COUNTRY_NAME = 'Japan';
-- 6 DONE
-- approach 1
SELECT DISTINCT E.employee_id AS Employee_id , E.last_name  AS Employee_Nane,  Manager.employee_id AS M_ID, Manager.last_name AS M_name
FROM EMPLOYEES AS Manager ,
DEPARTMENTS D 
,EMPLOYEES AS E
 WHERE E.Manager_ID = Manager.EMPLOYEE_ID 
 AND E.DEPARTMENT_ID = D.DEPARTMENT_ID;
 
 -- approach 2
SELECT E.EMPLOYEE_ID, E.LAST_NAME, E.MANAGER_ID, M.LAST_NAME AS MANAGER_LAST_NAME
FROM EMPLOYEES E
LEFT JOIN EMPLOYEES M ON E.MANAGER_ID = M.EMPLOYEE_ID;


-- 7 DONE
SELECT first_name, last_name, hire_date
FROM EMPLOYEES
WHERE hire_date > (SELECT hire_date FROM EMPLOYEES WHERE last_name = 'De Haan');

-- 8 Done
-- Approach 1
with number_of_employees_of_each_department as(
	select department_id, count(*) as num_employees
    from employees
    group by department_id
)
select d.department_name, n.num_employees
from DEPARTMENTS d, number_of_employees_of_each_department n
where d.department_id = n.department_id;

-- Approach 2
SELECT D.DEPARTMENT_NAME, COUNT(E.EMPLOYEE_ID) AS NUM_EMPLOYEES
FROM DEPARTMENTS D
LEFT JOIN EMPLOYEES E ON D.DEPARTMENT_ID = E.DEPARTMENT_ID
GROUP BY D.DEPARTMENT_NAME;

-- 9 Done
SELECT employee_id, JOB_ID,
DATEDIFF(end_date, start_date) AS days_between_dates
FROM JOB_HISTORY
WHERE department_id = 30;

-- 10 Done
SELECT D.DEPARTMENT_NAME, E.FIRST_NAME AS MANAGER_FIRST_NAME, E.LAST_NAME AS MANAGER_LAST_NAME, L.CITY, C.COUNTRY_NAME
FROM DEPARTMENTS D
JOIN EMPLOYEES E ON D.MANAGER_ID = E.EMPLOYEE_ID
JOIN LOCATIONS L ON D.LOCATION_ID = L.LOCATION_ID
JOIN COUNTRIES C ON L.COUNTRY_ID = C.COUNTRY_ID;

-- 11 Done
SELECT D.DEPARTMENT_NAME, AVG(E.SALARY) AS AVG_SALARY
FROM DEPARTMENTS D
LEFT JOIN EMPLOYEES E ON D.DEPARTMENT_ID = E.DEPARTMENT_ID
GROUP BY D.DEPARTMENT_NAME;

-- 12 Done
CREATE TABLE JOBS(
  JOB_ID VARCHAR(10),
  JOB_TITLE VARCHAR(35),
  MIN_SALARY NUMERIC (10,2),
  MAX_SALARY NUMERIC (10,2),
  CONSTRAINT PK_JOBS PRIMARY KEY (JOB_ID),
 FOREIGN KEY(GRADE_LEVEL) REFERENCES JOB_GRADES(GRADE_LEVEL)
);

ALTER TABLE JOBS
DROP COLUMN MIN_SALARY,
DROP COLUMN MAX_SALARY;
  
 CREATE TABLE JOB_GRADES(
 GRADE_LEVEL VARCHAR(4) ,
 LOWEST_SAL NUMERIC (10,2),
 HIGHEST_SAL NUMERIC (10,2),
 CONSTRAINT PK_JOB_GRADES PRIMARY KEY (GRADE_LEVEL)
);
